{"version":3,"file":null,"sources":["../src/hexs6.js","../src/hexmaps6.js"],"sourcesContent":["/**\r\n * Hexs6\r\n * Updated and Curated by Hunnie Tana\r\n * Based on excellent documentation and Generated Code -- http://www.redblobgames.com/grids/hexagons/\r\n */\r\n\r\n/**\r\n * Simple named generator for an {x,y}\r\n * Useful for making code more self-documenting\r\n * @param x \r\n * @param y \r\n */\r\nexport function Point(x, y) {\r\n    return { x, y };\r\n}\r\n\r\n/**\r\n * Named generator for the expected hex javascript object, which holds a hex's co-ors in cubed format\r\n * These serve as both coordinate and vector in the hex plane, allowing them to be scaled, etc\r\n * @param q \r\n * @param r \r\n * @param s \r\n */\r\nexport function Hex(q, r, s) {\r\n    return { q, r, s };\r\n}\r\n\r\n/**\r\n * Outputs the hex in a sensible, consistent string format. Useful for logging and hashing.\r\n * @param hex \r\n */\r\nexport function hex_stringify(hex) {\r\n    return `q:${hex.q}|r:${hex.r}|s:${hex.s}`;\r\n}\r\n\r\n\r\n/**\r\n * Named Generator for an Axial coordinate, just another name for Point at the end of the day, but self-documenting code, yo\r\n * @param x \r\n * @param z \r\n */\r\nexport function HexAxis(x, z) {\r\n    return { x, z };\r\n}\r\n\r\nexport function cube_to_axial(cube) {\r\n    let q = cube.x\r\n    let r = cube.z\r\n    return HexAxis(q, r)\r\n}\r\n\r\nexport function axial_to_cube(hex) {\r\n    let x = hex.q\r\n    let z = hex.r\r\n    let y = -x - z\r\n    return Hex(x, y, z)\r\n}\r\n\r\n/**\r\n * Hex Coordinate system addition\r\n * @param a 1st Hex\r\n * @param b 2nd Hex\r\n */\r\nexport function hex_add(a, b) {\r\n    return Hex(a.q + b.q, a.r + b.r, a.s + b.s);\r\n}\r\n\r\n/**\r\n * Hex Coordinate system subtration\r\n * @param a 1st Hex\r\n * @param b 2nd Hex\r\n */\r\nexport function hex_subtract(a, b) {\r\n    return Hex(a.q - b.q, a.r - b.r, a.s - b.s);\r\n}\r\n\r\n/**\r\n * Hex Coordinate system scaling\r\n * @param a Hex\r\n * @param k Scalar\r\n */\r\nexport function hex_scale(a, k) {\r\n    return Hex(a.q * k, a.r * k, a.s * k);\r\n}\r\n\r\n\r\nexport const hex_directions = [Hex(1, 0, -1), Hex(0, 1, -1), Hex(-1, 1, 0), Hex(-1, 0, 1), Hex(0, -1, 1), Hex(1, -1, 0)];\r\nexport const hex_direction_names_horizontal = [\"East\",  \"NorthEast\", \"NorthWest\", \"West\",  \"SouthWest\", \"SouthEast\"];\r\nconst normalized_horizontal_names = hex_direction_names_horizontal.map((d) => d.toLowerCase());\r\nexport const hex_direction_names_vertical = [\"NorthEast\", \"North\", \"NorthWest\", \"SouthWest\", \"South\", \"SouthEast\"];\r\nconst normalized_vertical_names = hex_direction_names_vertical.map((d) => d.toLowerCase());\r\n\r\n/**\r\n * Resolve hex directions consistently, either by integer index or name string.\r\n * Names default to Horizontal aka Pointy Top orientation\r\n * Index Order: [Hex(1, 0, -1), Hex(0, 1, -1), Hex(-1, 1, 0), Hex(-1,0,1),Hex(0,-1,1),Hex(1,-1,-0)];\r\n * Horizontal:  [\"East\",  \"NorthEast\", \"NorthWest\", \"West\",  \"SouthEast\", \"SouthWest\"]\r\n * Vertical:    [\"NorthEast\", \"North\", \"NorthWest\", \"SouthWest\", \"South\", \"SouthEast\"]\r\n * TODO: Case insensitivity\r\n * @param direction String or Index\r\n * @param horizontal Boolean, false uses vertical names\r\n */\r\nexport function hex_direction(direction, horizontal = true) {\r\n    if (typeof(direction) === typeof(\"string\")) {\r\n        let index;\r\n        if (horizontal) {\r\n            index = normalized_horizontal_names.indexOf(direction.toLowerCase());\r\n        } else {\r\n            index = normalized_vertical_names.indexOf(direction.toLowerCase());\r\n        }\r\n        return index > -1 ? hex_directions[index] : undefined;\r\n    }\r\n\r\n    return hex_directions[direction];\r\n}\r\n\r\n\r\n/*\r\n[ x=q,  y=r,  z=s]\r\nto        [-r, -s, -q]\r\n */\r\nexport function hex_rotate_left(rotation_origin, center = Hex(0, 0, 0)) {\r\n    let vector = hex_subtract(rotation_origin, center);\r\n    let rotated = Hex(-vector.r * 1, -vector.s * 1, -vector.q * 1);\r\n    return hex_add(rotated, center);\r\n}\r\n\r\n/*       [ x=q,  y=r,  z=s]\r\nto        [-y=-r, -z=-s, -x=-q]\r\n\r\n[ x,  y,  z]\r\nto  [-z, -x, -y]\r\n */\r\nexport function hex_rotate_right(rotation_origin, center = Hex(0, 0, 0)) {\r\n    let vector = hex_subtract(rotation_origin, center);\r\n    let rotated = Hex(-vector.s * 1, -vector.q * 1, -vector.r * 1);\r\n    return hex_add(rotated, center);\r\n}\r\n\r\n/**\r\n * \r\n * @param hex position\r\n * @param direction \r\n */\r\nexport function hex_neighbor(hex, direction) {\r\n    return hex_add(hex, hex_direction(direction));\r\n}\r\n\r\n/**\r\n * TODO: Larger than 1 cycle //TODO: Brain fart?! Yeah, this doesn't touch an actual map. Dur. Brain needs retool.\r\n * @param hex center hex\r\n */\r\nexport function hex_neighbors(hex) {\r\n    return hex_directions.map((direction) => { return hex_add(hex, direction); });\r\n}\r\n\r\n\r\nlet hex_diagonals = [Hex(2, -1, -1), Hex(1, -2, 1), Hex(-1, -1, 2), Hex(-2, 1, 1), Hex(-1, 2, -1), Hex(1, 1, -2)];\r\nexport function hex_diagonal_neighbor(hex, direction) {\r\n    return hex_add(hex, hex_diagonals[direction]);\r\n}\r\n\r\nexport function hex_length(hex) {\r\n    return Math.trunc((Math.abs(hex.q) + Math.abs(hex.r) + Math.abs(hex.s)) / 2);\r\n}\r\n\r\nexport function hex_distance(a, b) {\r\n    return hex_length(hex_subtract(a, b));\r\n}\r\n\r\nexport function hex_round(h) {\r\n    let q = Math.trunc(Math.round(h.q));\r\n    let r = Math.trunc(Math.round(h.r));\r\n    let s = Math.trunc(Math.round(h.s));\r\n    let q_diff = Math.abs(q - h.q);\r\n    let r_diff = Math.abs(r - h.r);\r\n    let s_diff = Math.abs(s - h.s);\r\n    if (q_diff > r_diff && q_diff > s_diff) {\r\n        q = -r - s;\r\n    } else\r\n    if (r_diff > s_diff) {\r\n        r = -q - s;\r\n    } else {\r\n        s = -q - r;\r\n    }\r\n    return Hex(q + +0, r + +0, s + +0); //BUGFIX: ES6 negative 0 was causing tests to fail, could cause weird bugs for someone someday?\r\n    //This also fixed the order issues I was seeing, so no sort needed? -- HT\r\n}\r\n\r\nexport function hex_lerp(a, b, t) {\r\n    return Hex(a.q * (1 - t) + b.q * t, a.r * (1 - t) + b.r * t, a.s * (1 - t) + b.s * t);\r\n}\r\n\r\nexport function hex_linedraw(a, b) {\r\n    let N = hex_distance(a, b);\r\n    let a_nudge = Hex(a.q + 0.000001, a.r + 0.000001, a.s - 0.000002);\r\n    let b_nudge = Hex(b.q + 0.000001, b.r + 0.000001, b.s - 0.000002);\r\n    let results = [];\r\n    let step = 1.0 / Math.max(N, 1);\r\n    for (let i = 0; i <= N; i++) {\r\n        results.push(hex_round(hex_lerp(a_nudge, b_nudge, step * i)));\r\n    }\r\n    return results;\r\n}\r\n\r\n\r\n\r\n\r\nexport function OffsetCoord(col, row) {\r\n    return { col: col, row: row };\r\n}\r\n\r\nexport const EVEN = 1;\r\nexport const ODD = -1;\r\nexport function qoffset_from_cube(offset, h) {\r\n    let col = h.q;\r\n    let row = h.r + Math.trunc((h.q + offset * (h.q & 1)) / 2);\r\n    return OffsetCoord(col, row);\r\n}\r\n\r\nexport function qoffset_to_cube(offset, h) {\r\n    let q = h.col;\r\n    let r = h.row - Math.trunc((h.col + offset * (h.col & 1)) / 2);\r\n    let s = -q - r;\r\n    return Hex(q, r, s);\r\n}\r\n\r\nexport function roffset_from_cube(offset, h) {\r\n    let col = h.q + Math.trunc((h.r + offset * (h.r & 1)) / 2);\r\n    let row = h.r;\r\n    return OffsetCoord(col, row);\r\n}\r\n\r\nexport function roffset_to_cube(offset, h) {\r\n    let q = h.col - Math.trunc((h.row + offset * (h.row & 1)) / 2);\r\n    let r = h.row;\r\n    let s = -q - r;\r\n    return Hex(q, r, s);\r\n}\r\n\r\n\r\n\r\n\r\nexport function Orientation(f0, f1, f2, f3, b0, b1, b2, b3, start_angle) {\r\n    return { f0: f0, f1: f1, f2: f2, f3: f3, b0: b0, b1: b1, b2: b2, b3: b3, start_angle: start_angle };\r\n}\r\n\r\n\r\n\r\n/**\r\n * TODO: Docs\r\n * @param orientation \r\n * @param size \r\n * @param origin \r\n */\r\nexport function Layout(orientation, size, origin) {\r\n    return { orientation: orientation, size: size, origin: origin };\r\n}\r\n\r\nexport const layout_pointy = Orientation(Math.sqrt(3.0), Math.sqrt(3.0) / 2.0, 0.0, 3.0 / 2.0, Math.sqrt(3.0) / 3.0, -1.0 / 3.0, 0.0, 2.0 / 3.0, 0.5);\r\nexport const layout_flat = Orientation(3.0 / 2.0, 0.0, Math.sqrt(3.0) / 2.0, Math.sqrt(3.0), 2.0 / 3.0, 0.0, -1.0 / 3.0, Math.sqrt(3.0) / 3.0, 0.0);\r\nexport function hex_to_pixel(layout, h) {\r\n    let M = layout.orientation;\r\n    let size = layout.size;\r\n    let origin = layout.origin;\r\n    let x = (M.f0 * h.q + M.f1 * h.r) * size.x;\r\n    let y = (M.f2 * h.q + M.f3 * h.r) * size.y;\r\n    return Point(x + origin.x, y + origin.y);\r\n}\r\n\r\nexport function pixel_to_hex(layout, p) {\r\n    let M = layout.orientation;\r\n    let size = layout.size;\r\n    let origin = layout.origin;\r\n    let pt = Point((p.x - origin.x) / size.x, (p.y - origin.y) / size.y);\r\n    let q = M.b0 * pt.x + M.b1 * pt.y;\r\n    let r = M.b2 * pt.x + M.b3 * pt.y;\r\n    return Hex(q, r, -q - r);\r\n}\r\n\r\nexport function hex_corner_offset(layout, corner) {\r\n    let M = layout.orientation;\r\n    let size = layout.size;\r\n    let angle = 2.0 * Math.PI * (M.start_angle - corner) / 6;\r\n    return Point(size.x * Math.cos(angle), size.y * Math.sin(angle));\r\n}\r\n\r\nexport function polygon_corners(layout, h) {\r\n    let corners = [];\r\n    let center = hex_to_pixel(layout, h);\r\n    for (let i = 0; i < 6; i++) {\r\n        let offset = hex_corner_offset(layout, i);\r\n        corners.push(Point(center.x + offset.x, center.y + offset.y));\r\n    }\r\n    return corners;\r\n}","import { Hex, hex_neighbors, hex_add, hex_rotate_right, hex_subtract, hex_distance, hex_stringify } from './hexs6';\r\n\r\nexport function string_hash_code(string){\r\n\tvar hash = 0;\r\n\tif (string.length == 0) return hash;\r\n\tfor (let i = 0; i < string.length; i++) {\r\n\t\tlet char = string.charCodeAt(i);\r\n\t\thash = ((hash<<5)-hash)+char;\r\n\t\thash = hash & hash; // Convert to 32bit integer\r\n\t}\r\n\treturn hash;\r\n}\r\n\r\nexport function hex_hash(hex){\r\n    return string_hash_code(hex_stringify(hex));\r\n}\r\n\r\nexport function store_hex(hex,map){\r\n    map[hex_hash(hex)] = hex;\r\n}\r\n\r\nexport function get_hex(hex,map){\r\n    return map[hex_hash(hex)];\r\n}\r\n\r\nexport function hexmap_values(hexmap){\r\n    return Object.keys(hexmap).map((k) =>{return hexmap[k];})\r\n}\r\n\r\nexport function hexmap_neighbors(hex,map){\r\n        return hex_neighbors(hex).map((neighborPos) => {\r\n                    return get_hex(neighborPos,map);\r\n                }).filter((n) => {return !!n});\r\n}\r\n\r\nexport function hex_array_to_map_reducer(map, currentArrayItem){\r\n    store_hex(currentArrayItem, map); \r\n    return map;\r\n}\r\n\r\nexport function create_hex_cells(radius){\r\n        radius = parseInt(radius);\r\n        let map = new Array();\r\n        for(let q = -radius; q <= radius; q++){\r\n            let start = Math.max(-radius, -q - radius);\r\n            let end = Math.min(radius, -q + radius);\r\n\r\n            for(let r = start; r <= end; r++){\r\n                let hex = Hex(q,r,-q-r);\r\n                map.push(hex);\r\n            }\r\n        }\r\n        return map;\r\n}\r\n\r\nexport function wraparound_mirror_centers(radius,origin=Hex(0,0,0)){\r\n    let offsets = [origin, hex_add(origin,Hex(2*radius+1, -radius, -radius-1)) ];\r\n    while(offsets.length < 7){\r\n        let prev = offsets[offsets.length-1];\r\n        offsets.push(hex_rotate_right(prev));\r\n    }\r\n    return offsets;\r\n}\r\n\r\n//Busted do not use\r\nexport function wraparound_bounds(position,radius,centers=wraparound_mirror_centers(radius)){\r\n    //console.log(\"Running with Center on POS:\",centers, position);\r\n    //console.log(\"Wtf are you radius?\", radius);\r\n    for(let offset of centers){\r\n        let distance = hex_distance(position, offset);\r\n        let check = distance <= radius;\r\n        //console.log(`For offset, distance is ${distance} hexes`,position,offset);\r\n        if(check){\r\n            return hex_subtract(position,  offset);\r\n        }\r\n    }\r\n    console.log(\"\\nUnable to find any center we're less than a radius away from?!\\n\");\r\n    return undefined;\r\n\r\n}\r\n\r\nexport function hexmap_wraparound_neighbors(hex,map, mirrors){\r\n        return hex_neighbors(hex).map((neighborPos) => {\r\n                    let realPos = wraparound_bounds(neighborPos, map.radius, mirrors);\r\n                    if(realPos != neighborPos){ console.log(\"We shifted off the board?\", neighborPos, realPos); }\r\n                    return get_hex(realPos,map);\r\n                }).filter((n) => {return !!n});\r\n}"],"names":["Point","x","y","Hex","q","r","s","hex_stringify","hex","hex_add","a","b","hex_subtract","hex_directions","hex_direction_names_horizontal","normalized_horizontal_names","map","d","toLowerCase","hex_direction_names_vertical","normalized_vertical_names","hex_direction","direction","horizontal","index","indexOf","undefined","hex_rotate_left","rotation_origin","center","vector","rotated","hex_rotate_right","hex_neighbor","hex_neighbors","hex_diagonals","hex_diagonal_neighbor","hex_length","Math","abs","hex_distance","hex_round","h","round","q_diff","r_diff","s_diff","hex_lerp","t","hex_linedraw","N","a_nudge","b_nudge","results","step","max","i","push","OffsetCoord","col","row","EVEN","ODD","qoffset_from_cube","offset","qoffset_to_cube","roffset_from_cube","roffset_to_cube","Orientation","f0","f1","f2","f3","b0","b1","b2","b3","start_angle","Layout","orientation","size","origin","layout_pointy","sqrt","layout_flat","hex_to_pixel","layout","M","pixel_to_hex","p","pt","string_hash_code","string","hash","length","char","charCodeAt","hex_hash","store_hex","get_hex","hexmap_values","hexmap","k","hexmap_neighbors","neighborPos","filter","n","hex_array_to_map_reducer","currentArrayItem","create_hex_cells","radius","parseInt","Array","start","end","min","wraparound_mirror_centers","offsets","prev","wraparound_bounds","position","centers","distance","check","log","hexmap_wraparound_neighbors","mirrors","realPos"],"mappings":"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"}